{
    "index": {
        "siteTitle": "Interpreter - Home",
        "title": "Interpreter",
        "nav": "Home",
        "run": "RUN",
		"prev": "&larr; Prev",
		"next": "Next &rarr;",
		"typeSth": "Type something here...",
		"exampleProgram": "#This is an example program\nVAR1 DC INTEGER(1)\nVAR2 DC INTEGER(2)\nRES DS INTEGER\n#Clear the first register\nSR 1,1\n#Compute sum\nA 1,VAR1\nA 1,VAR2\n#Store in memory\nST 1,RES"
    },
    "docs": {
        "siteTitle": "Interpreter - Docs",
        "title": "Documentation",
        "nav": "Documentation",
		"general": {
			"header": "General info",
			"content": "Pseudoassembler is a programming language of great power. Proficient usage of this tool is an art that very few ever possessed. We hope that the following documentation will allow you not only to master but also come to like pseudoassembler (it's possible – believe us)!"
		},
		"memory": {
			"header": "Memory addressing",
			"content": "There are four ways of addressing memory in pseudoassembler. Let us present all of them: <p></p> <ul><li><b>[label]</b> - The interpreter will work on the memory block assigned to the given label. If the label is associated with an array, it points to its first memory block.</li><li><b>[label]([register])</b> - The interpreter will work on the memory block whose address is equal to the sum of the address pointed at by the label and the address stored in the given register.</li><li><b>[memory address]</b> - The interpreter will work on the memory block with the given address. </li><li><b>[memory address]([register])</b> - The interpreter will work on the memory block whose address is equal to the sum of the given address and the address stored in the given register.</li></ul><p>All these ways are, ultimately, ways of achieving the same objective - accessing a memory block.</p><h4>Example</h4><p>Suppose we declared two arrays VEC1{1, 2} and VEC2{3, 4} (both size of 2 integers).<br>Conveniently, we also prepared registers - REG1{0} and REG2{4}. (Notice that 4 is the size of integer in bytes)<br>Now let's analyse the memory addresses utilised by our arrays:<pre>VEC1[0] = 1 | address: 0<br>VEC1[1] = 2 | address: 4<br>VEC2[0] = 3 | address: 8<br>VEC2[1] = 4 | address: 12</pre>The Following commands once executed will compute the sum of values stored in VEC1 and VEC2 and save it in REG1:<p></p><pre>A   1, VEC1<br>A   1, VEC1(2)<br>A   1, 8 <br>A   1, 8(2)</pre></p>"
		},
		"rules": {
			"header": "Labeling rules",
			"content": "Despite being one of the most powerful programming languages on the planet Earth, pseudoassembler has some minor limitations. You should be aware of some restrictions while writing your programs.<ul><li>Labels should only consist of alphanumeric characters (letters A-Z, a-z and digits 0-9).</li><li>It is forbidden to use any of the command words as a label.</li><li>It is forbidden to use digit as a first character of label.</li></ul>"
		},
		"statusRegister": {
			"header": "Status Register",
			"content": "The status register is a special register that stores the current state of the program. Depending on the sign of the result of the latest arithmetic operation (such as A, AR, S, SR, M, MR, D, DR, C, CR), the status register can store different values:<p></p><ul><li>00 \u2013 when the result is equal to 0, <\/li><li>01 \u2013 when the result is positive, <\/li><li>10 \u2013 when the result is negative, <\/li><li>11 \u2013 when some error has occurred (for example: division by 0).<\/li><\/ul><h4>Example<\/h4>Suppose we have three registers: REG1{2}, REG2{-2}, REG3{0}. Let us analyse the state of the status register after executing the following commands: <p></p><pre>AR\t1, 2\t# Status register = '00'<\/pre><pre>SR\t1, 2\t# Status register = '01' <\/pre><pre>MR\t1, 2\t# Status register = '10' <\/pre><pre>DR\t1, 3\t# Status register = '11' <\/pre>Should you have any doubts about these commands, don\u2019t hesitate to check the 'Commands' section of the documentation."
		},
		"commands": {
			"header": "Commands",
			"content": {
				"DS": {
					"short": "Declare a new variable or array without an initial value.",
					"long": "“DS” (Declare Constant) command reserves required memory space for a new variable or array and links the provided label to that area of memory.",
					"params": "<pre>[label] DS [variable type]\t\t# Declaring variable</pre><pre>[label] DS [size]*[variable type]\t# Declaring array</pre>Currently the only supported type of the variable is INTEGER.",
					"examples": "Let's analyse a short example: <pre>VARIABLE1\tDC\tINTEGER</pre><pre>ARRAY1\t\tDC\t3*INTEGER</pre>After executing these commands, the following objects will be created:<pre>VARIABLE1 = ?,  ARRAY1 = {?, ?, ?}. </pre><b>Note that all initial values of variables declared using “DS” are unknown (most likely random!). Under no circumstances should you work on them before assigning your own values.</b>"
				},
				"DC": {
					"short": "Declare a new variable or array with an initial value.",
					"long": "“DC” (Declare Space) command reserves required memory space for a new variable or array and links the provided label to that area of memory. Unlike the “DS” command, the declared variable has an initial value which should be specified within the code line.",
					"params": "<pre>[label] DC [variable type]([value])\t\t# Declaring variable</pre><pre>[label] DC [size]*[variable type]([value])\t# Declaring array</pre>Currently the only supported type of the variable is INTEGER.",
					"examples": "Let's analyse a short example: <pre>VARIABLE1\tDC\tINTEGER(7)</pre><pre>ARRAY1\t\tDC\t3*INTEGER(12)</pre>After executing these commands, the following objects will be created:<pre>VARIABLE1 = 7,</pre><pre>ARRAY1 = {12, 12, 12}.</pre>"
				},
				"AR": {
					"short": "Add registers.",
					"long": "“AR” (Add Registers) command adds the contents of two registers and stores the result of this operation in the target register.",
					"params": "[label] AR [target register], [source register]",
					"examples": "Suppose we have already prepared registers – REG1{2} and REG2{3}. Let's analyse the result of the following operation: <pre>\tAR\t1, 2\t# REG1 = 5 (REG1 := REG1 + REG2), REG2 = 3</pre>"
				},
				"A": {
					"short": "Add a register and a memory block.",
					"long": "“A” (Add) command adds the contents of a register and a memory block and stores the result of this operation in the target register.",
					"params": "[label] A [target register], [source memory block] <p> Note that you can choose from four different ways of addressing using [source memory block]. Refer to the “Memory addressing” section for further assistance.</p>",
					"examples": " Suppose we declared the variable VAR{2} and prepared the register REG1{-1}. Now let's analyse the result of executing the following code: <pre>\tA\t1, VAR\t# REG1 = 1</pre>"
				},
				"SR": {
					"short": "Subtract registers.",
					"long": "“SR” (Subtract Registers) command subtracts the contents of two registers and stores the result of this operation in the target register.",
					"params": "[label] SR [target register], [source register]",
					"examples": "Suppose we have already prepared registers – REG1{-12} and REG2{4}. Let's analyse the result of the following operation: <pre>\tSR\t1, 2\t# REG1 = -16 (REG1 := REG1 - REG2), REG2 = 4</pre>"
				},
				"S": {
					"short": "Subtract a register and a memory block.",
					"long": "“S” (Subtract) command subtracts the contents of a register and a memory block and stores the result of this operation in the target register.",
					"params": "[label] S [target register], [source memory block] <p> Note that you can choose from four different ways of addressing using [source memory block]. Refer to the “Memory addressing” section for further assistance.</p>",
					"examples": " Suppose we declared the variable VAR{14} and prepared the register REG1{3}. Now let's analyse the result of executing the following code: <pre>\tS\t1, VAR\t# REG1 = 11</pre>"
				},
				"MR": {
					"short": "Multiply registers.",
					"long": "“MR” (Multiply Registers) command multiplies the contents of two registers and stores the result of this operation in the target register.",
					"params": "[label] MR [target register], [source register]",
					"examples": "Suppose we have already prepared registers – REG1{4} and REG2{6}. Let's analyse the result of the following operation: <pre>\tMR\t1, 2\t# REG1 = 24 (REG1 := REG1 * REG2), REG2 = 6</pre>"
				},
				"M": {
					"short": "Multiply a register and a memory block.",
					"long": "“M” (Multiply) command multiplies the contents of a register and a memory block and stores the result of this operation in the target register.",
					"params": "[label] M [target register], [source memory block] <p> Note that you can choose from four different ways of addressing using [source memory block]. Refer to the “Memory addressing” section for further assistance.</p>",
					"examples": " Suppose we declared the variable VAR{2} and prepared the register REG1{8}. Now let's analyse the result of executing the following code: <pre>\tM\t1, VAR\t# REG1 = 16</pre>"
				},
				"DR": {
					"short": "Divide registers.",
					"long": "“DR” (Divide Registers) command divides the contents of two registers and stores the result of this operation in the target register.",
					"params": "[label] DR [target register], [source register]",
					"examples": "Suppose we have already prepared registers – REG1{8} and REG2{2}. Let's analyse the result of the following operation: <pre>\tDR\t1, 2\t# REG1 = 4 (REG1 := REG1 / REG2), REG2 = 2</pre> <p>Let's analyse another example: REG3{2} and REG4{0}. The result of the following operation is: <pre>\tDR\t3, 4\t# REG3 = 2, REG4 = 0, Status register = '11'</pre></p>"
				},
				"D": {
					"short": "Divide a register and a memory block.",
					"long": "“D” (Divide) command divides the contents of a register and a memory block and stores the result of this operation in the target register.",
					"params": "[label] D [target register], [source memory block] <p> Note that you can choose from four different ways of addressing using [source memory block]. Refer to the “Memory addressing” section for further assistance.</p>",
					"examples": " Suppose we declared the variable VAR{2} and prepared the register REG1{3}. Now let's analyse the result of executing the following code: <pre>\tD\t1, VAR\t# REG1 = 1</pre>"
				},
				"CR": {
					"short": "Compare registers.",
					"long": "“CR” (Compare Registers) command compares the contents of two registers by subtracting the content of the second register from the content of the first register. Depending on the sign of the result of this subtraction, the status register will be changed. Contents of both registers won’t change.",
					"params": "[label] CR [first register], [second register]",
					"examples": "Suppose we have already prepared registers – REG1{2} and REG2{3}. Let’s analyse the result of following operation: <pre>\tCR\t1, 2\t# Status register = '10'</pre>"
				},
				"C": {
					"short": "Compare a register and a memory block.",
					"long": "“C” (Compare) command compares the contents of register and memory block by subtracting the content of the momery block from the content of the register. Depending on the sign of the result of this subtraction, the status register will be changed. Contents of the register and the memory block won’t change.",
					"params": "[label] C [register], [memory block] <p> Note that you can choose from four different ways of addressing using [memory block]. Refer to the “Memory addressing” section for further assistance.</p>",
					"examples": " Suppose we declared the variable VAR{2} and prepared the register REG1{2}. Now let's analyse the result of executing the following code: <pre>\tC\t1, VAR\t# Status register = '00'</pre>"
				},
				"J": {
					"short": "Jump to label",
					"long": "“J” (Jump) command unconditionally jumps to the program line with the provided label. It’s useful for designing loops or default actions in if-like conditions.",
					"params": "[label] J [target label]",
					"examples": " Suppose we declared the variable VAR{1} and prepared the register REG1{0}. Now let's analyse the result of executing the following code: <pre>START\tA\t1, VAR\t# REG1 = 1 </pre><pre>\tA\t1, VAR\t# REG1 = 2 </pre><pre>JUMP\tJ\tEND\t</pre><pre>\tA\t1, VAR\t</pre><pre>\tA\t1, VAR\t</pre><pre>END\tST\t1, VAR\t# VAR1 = 2</pre>"
				},
				"JZ": {
					"short": "Jump to label if status is equal to zero",
					"long": "“JZ” (Jump Zero) command jumps to the program line with the provided label if the condition is met. If the result of the last arithmetic operation is equal to 0 (status register = “00”) a jump to the target line will be performed. It’s useful for designing loops or if-like conditions.",
					"params": "[label] JZ [target label]",
					"examples": " Suppose we declared the variable VAR{1} and prepared registers REG1{0} and REG2{3}. Now let's analyse the result of executing the following code: <pre>START\tAR\t1, 2</pre><pre>\tS\t2, VAR\t# Note that status register value may change.</pre><pre>JUMP\tJZ\tEND\t</pre><pre>\tJ\tSTART</pre><pre>END\tST\t1, VAR\t# VAR1 = 6</pre>"
				},
				"JP": {
					"short": "Jump to label if status is positive.",
					"long": "“JP” (Jump Positive) command jumps to the program line with the provided label if the condition is met. If the result of the last arithmetic operation is positive (status register = “01”) a jump to the target line will be performed. It’s useful for designing loops or if-like conditions.",
					"params": "[label] JP [target label]",
					"examples": " Suppose we declared the variable VAR{1} and prepared registers REG1{0} and REG2{-4}. Now let's analyse the result of executing the following code: <pre>START\tAR\t1, 2</pre><pre>\tA\t2, VAR\t# Note that status register value may change.</pre><pre>JUMP\tJP\tEND\t</pre><pre>\tJ\tSTART</pre><pre>END\tST\t1, VAR\t# VAR1 = -10</pre>"
				},
				"JN": {
					"short": "Jump to label if status is negative.",
					"long": "“JN” (Jump Negative) command jumps the to program line with the provided label if the condition is met. If the result of the last arithmetic operation is negative (status register = “10”) a jump to the target line will be performed. It’s useful for designing loops or if-like conditions.",
					"params": "[label] JN [target label]",
					"examples": " Suppose we declared the variable VAR{1} and prepared registers REG1{0} and REG2{2}. Now let's analyse the result of executing the following code: <pre>START\tAR\t1, 2</pre><pre>\tS\t2, VAR\t# Note that status register value may change.</pre><pre>JUMP\tJN\tEND\t</pre><pre>\tJ\tSTART</pre><pre>END\tST\t1, VAR\t# VAR1 = 2 (2 + 1 + (-1))</pre>"
				},
				"L": {
				"short": "Load memory block to register.",
				"long": "“L” (Load) command loads the content of the memory block to the target register. Note that it is possible to load the value of an undefined variable (created using DS command) – the resulting value will probably be random.",
				"params": "[label] L [target register], [source memory block] <p> Note that you can choose from four different ways of addressing using [source memory block]. Refer to the “Memory addressing” section for further assistance.</p>",
				"examples": " Suppose we declared the variable VAR{1} and prepared the register REG1. Now let's analyse the result of executing the following code: <pre>L\t1, VAR\t# REG1 = 1</pre>"
				},
				"LR": {
				"short": "Load source register to target register.",
				"long": "“LR” (Load Register) command loads the content of the source register to the target register. Note that it is possible to load value of an undefined register – the resulting value will probably be random.",
				"params": "[label] LR [target register], [source register]",
				"examples": " Suppose we prepared registers REG1{3}, REG2{4}. Now let's analyse the result of executing the following code: <pre>LR\t2, 1\t# REG2 = 3, REG1 = 3</pre>"
				},
				"LA": {
				"short": "Load the address of a memory block to target register",
				"long": "“LA” (Load Address) command loads the address of the memory block to the target register. It’s useful for iterating over arrays using loops.",
				"params": "[label] LA [target register], [memory block] <p> Note that you can choose from four different ways of addressing using [memory block]. Refer to the “Memory addressing” section for further assistance.</p>",
				"examples": " Suppose we declared variables and array: VAR1, VAR2, ARR1[3] and prepared register REG1. Now let's analyse the result of executing the following code: <pre>LA\t1, ARR1\t# REG1 = 8</pre>"
				},
				"ST": {
				"short": "Load source register to target memory block",
				"long": "“ST” (Store) command stores the content of the source register to the target memory block. Note that it is possible to load the value of an undefined register – the resulting value will probably be random. <p><b>“ST” command is the only command of pseudoassembler in which second argument is a target location (ARG1 → ARG2). For all commands except “ST” we have: ARG1 ← ARG2. </b></p>",
				"params": "[label] ST [source register], [target memory block] <p> Note that you can choose from four different ways of addressing using [target memory block]. Refer to the “Memory addressing” section for further assistance.</p>",
				"examples": " Suppose we prepared the variable RESULT and the register REG1{1}. Now let's analyse the result of executing the following code: <pre>ST\t1, RESULT\t# RESULT = 1</pre>"
				}
			}
		}
    },
    "contact": {
        "siteTitle": "Interpreter - Contact",
        "title": "Contact & Credits",
        "nav": "Contact",
		"contact": "Contact",
		"authors": "Authors",
		"authors-long": "<ul><li><a href=\"http:\/\/razormeister.pl/site/\" target=\"_BLANK\"> Tymoteusz Bartnik</a> (Frontend and engine - project’s “Jack of all trades”)</li><li><a href=\"https:\/\/github.com/lavar3l\" target=\"_BLANK\"> Przemysław Dominikowski</a> (Web infrastructure – domains, hosting; Creating documentation)</li><li><a href=\"https:\/\/dvalim.github.io/\" target=\"_BLANK\"> Dawid Alimowski</a> (Frontend - site layout, text editor, displaying results)</li><li><a href=\"https:\/\/github.com/witek0509x\" target=\"_BLANK\"> Wojciech Drochomirecki</a> (Interpreter’s engine – parser, execution module)</li></ul>",
		"credits": "Credits",
		"credits-long": "We would like to thank all people whose actions and idea have helped us creating our project:<ul><li><a href=\"http:\/\/www.mini.pw.edu.pl/~homenda/\" target=\"_BLANK\"> prof. dr hab. inż. Władysław Homenda</a> - author of an original pseudoassembler language, coordinator of an interpreter project (written in C) at Faculty of Mathematics and Information Science at Warsaw University of Technology - </li><li><a href=\"https:\/\/html5up.net\" target=\"_BLANK\">HTML5UP</a> - a source of site’s template</li></ul>",
		"repo": "GitHub Repository"
    },
	"run": {
		"program": "Program",
		"backToEditor": "Back",
		"registers": {
			"header": "Registers",
			"address": "Address",
			"value": "Value",
			"state": "STATE"
		},
		"memory": {
			"header": "Memory",
			"address": "Address",
			"var": "Variable",
			"value": "Value"
		}
	}
}