{
    "index": {
        "siteTitle": "Interpreter - Strona główna",
        "title": "Interpreter",
        "nav": "Strona główna",
        "run": "START",
		"typeSth": "Wpisz coś tutaj...",
		"exampleProgram": "#To przykładowy program\nVAR1 DC INTEGER(1)\nVAR2 DC INTEGER(2)\nRES DS INTEGER\n#Wyczyść pierwszy rejestr\nSR 1,1\n#Compute sum\nA 1,VAR1\nA 1,VAR2\n#Store in memory\nST 1,RES"
    },
    "docs": {
        "siteTitle": "Interpreter - Docs",
        "title": "Documentation",
        "nav": "Documentation",
		"general": {
			"header": "General info",
			"content": "Pseudoassembler is a programming language of great power. Proficient usage of this tool is an art that very few ever possessed. We hope that the following documentation will allow you not only to master but also come to like pseudoassembler (it's possible – believe us)!"
		},
		"memory": {
			"header": "Memory addressing",
			"content": "There are four ways of addressing memory in pseudoassembler. Let us present all of them: <p></p> <ul><li><b>[label]</b> - The interpreter will work on the memory block assigned to the given label. If the label is associated with an array, it points to its first memory block.</li><li><b>[label]([register])</b> - The interpreter will work on the memory block whose address is equal to the sum of the address pointed at by the label and the address stored in the given register.</li><li><b>[memory address]</b> - The interpreter will work on the memory block with the given address. </li><li><b>[memory address]([register])</b> - The interpreter will work on the memory block whose address is equal to the sum of the given address and the address stored in the given register.</li></ul><p>All these ways are, ultimately, ways of achieving the same objective - accessing a memory block.</p><h4>Example</h4><p>Suppose we declared two arrays VEC1{1, 2} and VEC2{3, 4} (both size of 2 integers).<br>Conveniently, we also prepared registers - REG1{0} and REG2{4}. (Notice that 4 is the size of integer in bytes)<br>Now let's analyse the memory addresses utilised by our arrays:<pre>VEC1[0] = 1 | address: 0<br>VEC1[1] = 2 | address: 4<br>VEC2[0] = 3 | address: 8<br>VEC2[1] = 4 | address: 12</pre>The Following commands once executed will compute the sum of values stored in VEC1 and VEC2 and save it in REG1:<p></p><pre>A   1, VEC1<br>A   1, VEC1(2)<br>A   1, 8 <br>A   1, 8(2)</pre></p>"
		},
		"rules": {
			"header": "Labeling rules",
			"content": "Despite being one of the most powerful programming languages on the planet Earth, pseudoassembler has some minor limitations. You should be aware of some restrictions while writing your programs.<ul><li>Labels should only consist of alphanumeric characters (letters A-Z, a-z and digits 0-9).</li><li>It is forbidden to use any of the command words as a label.</li><li>It is forbidden to use digit as a first character of label.</li></ul>"
		},
		"statusRegister": {
			"header": "Status Register",
			"content": "The status register is a special register that stores the current state of the program. Depending on the sign of the result of the latest arithmetic operation (such as A, AR, S, SR, M, MR, D, DR, C, CR), the status register can store different values:<p></p><ul><li>00 \u2013 when the result is equal to 0, <\/li><li>01 \u2013 when the result is positive, <\/li><li>10 \u2013 when the result is negative, <\/li><li>11 \u2013 when some error has occurred (for example: division by 0).<\/li><\/ul><h4>Example<\/h4>Suppose we have three registers: REG1{2}, REG2{-2}, REG3{0}. Let us analyse the state of the status register after executing the following commands: <p></p><pre>AR\t1, 2\t# Status register = '00'<\/pre><pre>SR\t1, 2\t# Status register = '01' <\/pre><pre>MR\t1, 2\t# Status register = '10' <\/pre><pre>DR\t1, 3\t# Status register = '11' <\/pre>Should you have any doubts about these commands, don\u2019t hesitate to check the 'Commands' section of the documentation."
		},
		"commands": {
			"header": "Commands",
			"content": {
				"DS": {
					"short": "Command declares new variable or array without initial value.",
					"long": "“DS” command reserves required memory space for new variable or array and links provided label to that area of memory.",
					"params": "<pre>[label] DS [variable type]\t\t# Declaring variable</pre><pre>[label] DS [size]*[variable type]\t# Declaring array</pre>Currently the only supported type of the variable is INTEGER.",
					"examples": "Let's analyse a short example: <pre>VARIABLE1\tDC\tINTEGER</pre><pre>ARRAY1\t\tDC\t3*INTEGER</pre>After executing these commands, following objects will be created:<pre>VARIABLE1 = ?,  ARRAY1 = {?, ?, ?}. </pre><b>Note that all initial values of variables declared using “DS” are unknown (most likely random)! Under no circumstances should you work on them before assigning your own values.</b>"
				},
				"DC": {
					"short": "Command declares new variable or array with initial value.",
					"long": "“DC” command reserves required memory space for new variable or array and links provided label to that area of memory. Unlike “DS” command, declared variable has initial value which should specified within the code line.",
					"params": "<pre>[label] DC [variable type]([value])\t\t# Declaring variable</pre><pre>[label] DC [size]*[variable type]([value])\t# Declaring array</pre>Currently the only supported type of the variable is INTEGER.",
					"examples": "Let's analyse a short example: <pre>VARIABLE1\tDC\tINTEGER(7)</pre><pre>ARRAY1\t\tDC\t3*INTEGER(12)</pre>After executing these commands, following objects will be created:<pre>VARIABLE1 = 7,</pre><pre>ARRAY1 = {12, 12, 12}.</pre>"
				},
				"AR": {
					"short": "Command adds content of registers.",
					"long": "“AR” command adds content of two registers and store the result of this operation in target register.",
					"params": "[label] AR [target register], [source register]",
					"examples": "Suppose we have already prepared registers – REG1{2} and REG2{3}. Let's analyse the result of the following operation: <pre>\tAR\t1, 2\t# REG1 = 5 (REG1 := REG1 + REG2), REG2 = 3</pre>"
				},
				"A": {
					"short": "Command adds content of register and memory block.",
					"long": "“A” command adds content of register and memory block and store the result of this operation in target register.",
					"params": "[label] A [target register], [source memory block] <p> Note that you can choose from four different ways of addressing using [source memory block]. Look at “Memory addressing” section for further assistance.</p>",
					"examples": " Suppose we declared variable VAR{2} and prepared register REG1{-1}. Now let's analyse the result of executing the following code: <pre>\tA\t1, VAR\t# REG1 = 1</pre>"
				},
				"SR": {
					"short": "Command subtracts content of registers.",
					"long": "“SR” command subtracts content of two registers and store the result of this operation in target register.",
					"params": "[label] SR [target register], [source register]",
					"examples": "Suppose we have already prepared registers – REG1{-12} and REG2{4}. Let's analyse the result of the following operation: <pre>\tSR\t1, 2\t# REG1 = -16 (REG1 := REG1 - REG2), REG2 = 4</pre>"
				},
				"S": {
					"short": "Command subtracts content of register and memory block.",
					"long": "“S” command subtracts content of register and memory block and store the result of this operation in target register.",
					"params": "[label] S [target register], [source memory block] <p> Note that you can choose from four different ways of addressing using [source memory block]. Look at “Memory addressing” section for further assistance.</p>",
					"examples": " Suppose we declared variable VAR{14} and prepared register REG1{3}. Now let's analyse the result of executing the following code: <pre>\tS\t1, VAR\t# REG1 = 11</pre>"
				},
				"MR": {
					"short": "Command multiplies content of registers.",
					"long": "“MR” command multiplies content of two registers and store the result of this operation in target register.",
					"params": "[label] MR [target register], [source register]",
					"examples": "Suppose we have already prepared registers – REG1{4} and REG2{6}. Let's analyse the result of the following operation: <pre>\tMR\t1, 2\t# REG1 = 24 (REG1 := REG1 * REG2), REG2 = 6</pre>"
				},
				"M": {
					"short": "Command multiplies content of register and memory block.",
					"long": "“M” command multiplies content of register and memory block and store the result of this operation in target register.",
					"params": "[label] M [target register], [source memory block] <p> Note that you can choose from four different ways of addressing using [source memory block]. Look at “Memory addressing” section for further assistance.</p>",
					"examples": " Suppose we declared variable VAR{2} and prepared register REG1{8}. Now let's analyse the result of executing the following code: <pre>\tM\t1, VAR\t# REG1 = 16</pre>"
				},
				"DR": {
					"short": "Command divides content of registers.",
					"long": "“DR” command divides content of two registers and store the result of this operation in target register.",
					"params": "[label] DR [target register], [source register]",
					"examples": "Suppose we have already prepared registers – REG1{8} and REG2{2}. Let's analyse the result of the following operation: <pre>\tDR\t1, 2\t# REG1 = 4 (REG1 := REG1 / REG2), REG2 = 2</pre> <p>Let's analyse another example: REG3{2} and REG4{0}. The result of the following operation is: <pre>\tDR\t3, 4\t# REG3 = 2, REG4 = 0, Status register = '11'</pre></p>"
				},
				"D": {
					"short": "Command divides content of register and memory block.",
					"long": "“D” command divides content of register and memory block and store the result of this operation in target register.",
					"params": "[label] D [target register], [source memory block] <p> Note that you can choose from four different ways of addressing using [source memory block]. Look at “Memory addressing” section for further assistance.</p>",
					"examples": " Suppose we declared variable VAR{2} and prepared register REG1{3}. Now let's analyse the result of executing the following code: <pre>\tD\t1, VAR\t# REG1 = 1</pre>"
				},
				"C": {
					"short": "Command compares content of register and memory block.",
					"long": "“C” command compares content of register and memory block by subtracting content of register and content of memory block. Depending on the sign of the result of this subtraction, status register is changed. content of register and memory block won’t change.",
					"params": "[label] C [register], [memory block] <p> Note that you can choose from four different ways of addressing using [memory block]. Look at “Memory addressing” section for further assistance.</p>",
					"examples": " Suppose we declared variable VAR{2} and prepared register REG1{2}. Now let's analyse the result of executing the following code: <pre>\tC\t1, VAR\t# Status register = '00'</pre>"
				},
				"CR": {
					"short": "Command compares content of two registers.",
					"long": "“CR” command compares content of two registers by subtracting content of first register and content of second register. Depending on the sign of the result of this subtraction, status register is changed. content of both registers won’t change.",
					"params": "[label] CR [first register], [second register]",
					"examples": "Suppose we have already prepared registers – REG1{2} and REG2{3}. Let’s analyse the result of following operation: <pre>\tCR\t1, 2\t# Status register = '10'</pre>"
				},
				"J": {
					"short": "Command unconditionally jumps to program line with provided label",
					"long": "“J” command unconditionally jumps to program line with provided label. It’s useful for designing loops or default actions in if-like conditions.",
					"params": "[label] J [target label]",
					"examples": " Suppose we declared variable VAR{1} and prepared register REG1{0}. Now let's analyse the result of executing the following code: <pre>START\tA\t1, VAR\t# REG1 = 1 </pre><pre>\tA\t1, VAR\t# REG1 = 2 </pre><pre>JUMP\tJ\tEND\t</pre><pre>\tA\t1, VAR\t</pre><pre>\tA\t1, VAR\t</pre><pre>END\tST\t1, VAR\t# VAR1 = 2</pre>"
				},
				"JZ": {
					"short": "Command jumps to program line with provided label if the result of last operation is equal to 0.",
					"long": "“JZ” command jumps to program line with provided label depending upon the condition. If the result of last operation is equal to 0 (status register = “00”) a jump to target line would be performed. It’s useful for designing loops or if-like conditions.",
					"params": "[label] JZ [target label]",
					"examples": " Suppose we declared variable VAR{1} and prepared registers REG1{0} and REG2{3}. Now let's analyse the result of executing the following code: <pre>START\tAR\t1, 2</pre><pre>\tS\t2, VAR\t# Note that status register value may change.</pre><pre>JUMP\tJZ\tEND\t</pre><pre>\tJ\tSTART</pre><pre>END\tST\t1, VAR\t# VAR1 = 6</pre>"
				},
				"JP": {
					"short": "Command jumps to program line with provided label if the result of last operation is positive.",
					"long": "“JP” command jumps to program line with provided label depending upon the condition. If the result of last operation is positive (status register = “01”) a jump to target line would be performed. It’s useful for designing loops or if-like conditions.",
					"params": "[label] JP [target label]",
					"examples": " Suppose we declared variable VAR{1} and prepared registers REG1{0} and REG2{-4}. Now let's analyse the result of executing the following code: <pre>START\tAR\t1, 2</pre><pre>\tA\t2, VAR\t# Note that status register value may change.</pre><pre>JUMP\tJP\tEND\t</pre><pre>\tJ\tSTART</pre><pre>END\tST\t1, VAR\t# VAR1 = -10</pre>"
				},
				"JN": {
					"short": "Command jumps to program line with provided label if the result of last operation is negative.",
					"long": "“JN” command jumps to program line with provided label depending upon the condition. If the result of last operation is negative (status register = “10”) a jump to target line would be performed. It’s useful for designing loops or if-like conditions.",
					"params": "[label] JN [target label]",
					"examples": " Suppose we declared variable VAR{1} and prepared registers REG1{0} and REG2{2}. Now let's analyse the result of executing the following code: <pre>START\tAR\t1, 2</pre><pre>\tS\t2, VAR\t# Note that status register value may change.</pre><pre>JUMP\tJN\tEND\t</pre><pre>\tJ\tSTART</pre><pre>END\tST\t1, VAR\t# VAR1 = 2 (2 + 1 + (-1))</pre>"
				},
				"L": {
				"short": "Command loads content of memory block to target register.",
				"long": "“L” command loads content of memory block to target register. Note that it is possible to load value of an undefined variable (created using DS command) – resulting value would probably be random.",
				"params": "[label] L [target register], [source memory block] <p> Note that you can choose from four different ways of addressing using [source memory block]. Look at “Memory addressing” section for further assistance.</p>",
				"examples": " Suppose we declared variable VAR{1} and prepared register REG1. Now let's analyse the result of executing the following code: <pre>L\t1, VAR\t# REG1 = 1</pre>"
				},
				"LR": {
				"short": "Command loads content of source register to target register.",
				"long": "“LR” command loads content of of source register to target register. Note that it is possible to load value of an undefined register – resulting value would probably be random.",
				"params": "[label] LR [target register], [source register]",
				"examples": " Suppose prepared registers REG1{3}, REG2{4}. Now let's analyse the result of executing the following code: <pre>LR\t2, 1\t# REG2 = 3, REG1 = 3</pre>"
				},
				"LA": {
				"short": "Command loads an address of memory block to target register",
				"long": "“LA” command an address of memory block to target register. It’s useful for iterating over arrays using loops.",
				"params": "[label] LA [target register], [memory block] <p> Note that you can choose from four different ways of addressing using [memory block]. Look at “Memory addressing” section for further assistance.</p>",
				"examples": " Suppose we declared variables and array: VAR1, VAR2, ARR1[3] and prepared register REG1. Now let's analyse the result of executing the following code: <pre>LA\t1, ARR1\t# REG1 = 8</pre>"
				},
				"ST": {
				"short": "Command loads content of source register to target memory block",
				"long": "“ST” command content of source register to target memory block. Note that it is possible to load value of an undefined register – resulting value would probably be random. <p><b>“ST” command is the only command of pseudoassembler in which second argument is a target location (ARG1 → ARH2). For all commands except “ST” we have: ARG1 ← ARG2. </b></p>",
				"params": "[label] ST [source register], [target memory block] <p> Note that you can choose from four different ways of addressing using [target memory block]. Look at “Memory addressing” section for further assistance.</p>",
				"examples": " Suppose we prepared variable RESULT and register REG1{1}. Now let's analyse the result of executing the following code: <pre>ST\t1, RESULT\t# RESULT = 1</pre>"
				}
			}
		}
    },
    "contact": {
        "siteTitle": "Interpreter - Contact",
        "title": "Contact & Credits",
        "nav": "Contact",
		"contact": "Contact",
		"authors": "Authors",
		"credits": "Credits",
		"credits-long": "We would like to thank all people whose actions and idea have helped us creating our project:<ul><li><a href=\"http:\/\/www.mini.pw.edu.pl/~homenda/\" target=\"_BLANK\"> prof. dr hab. inż. Władysław Homenda</a> - author of an original pseudoassembler language, coordinator of an interpreter project (written in C) at Faculty of Mathematics and Information Science at Warsaw University of Technology - </li><li><a href=\"https:\/\/html5up.net\" target=\"_BLANK\">HTML5UP</a> - a source of site’s template</li></ul>",
		"repo": "GitHub Repository"
    }
}